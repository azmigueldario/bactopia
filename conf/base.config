process {
    // Defaults
    cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus' )}
    memory = {check_max(2.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
    time = {check_max( (params.min_time).m * task.attempt, (params.max_time).m, 'time' )}
    errorStrategy = 'retry'
    maxRetries = params.max_retry


    // single cpus
    withLabel: max_cpus_1 {
        cpus = {check_max('request', RESOURCES.MAX_CPUS_1, 'cpus')}
    }

    // 75% cpus
    withLabel: max_cpu_75 {
        cpus = {check_max('request', RESOURCES.MAX_CPUS_75, 'cpus' )}
    }

    // Half cpus
    withLabel: max_cpu_50 {
        cpus = {check_max('request', RESOURCES.MAX_CPUS_50, 'cpus' )}
    }

    // Memory defaults
    withLabel: base_mem_4gb {
        memory = {check_max(4.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
    }

    withLabel: base_mem_8gb {
        memory = {check_max(8.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
    }

    // Process specific
    withLabel: 'assemble_genome' {
        memory = { meta.runtype == 'hybrid' || params.use_unicycler ? check_max((32.GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory') : check_max((16.GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
        time = { meta.runtype == 'hybrid' ||  params.use_unicycler ? check_max( 2.h * task.attempt, (params.max_time).m, 'time' ) : check_max( (params.min_time).m * task.attempt, (params.max_time).m, 'time' )}
    }

    withLabel: 'gather_samples' {
        maxForks = params.max_downloads
        maxRetries = 20
    }

    // Modules imported from nf-core
    withLabel: process_low {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
        memory = {check_max(8.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
        time = {check_max( 2.h * task.attempt, 2.h * task.attempt, 'time' )}
    }
    withLabel: process_medium {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
        memory = {check_max(16.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
        time = {check_max( 12.h * task.attempt, 12.h * task.attempt, 'time' )}
    }
    withLabel: process_high {
        cpus = {check_max('request', RESOURCES.MAX_CPUS, 'cpus')}
        memory = {check_max(64.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
        time = {check_max( 24.h * task.attempt, 24.h * task.attempt, 'time' )}
    }
    withLabel: process_long {
        time = {check_max( 96.h * task.attempt, 96.h * task.attempt, 'time' )}
    }
    withLabel: process_high_memory {
        memory = {check_max(128.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
    }
    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}
